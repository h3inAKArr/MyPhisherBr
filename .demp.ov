import base64 as b64

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

string = """"""

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

decode = b64.b64decode(bytes(string,"utf-8"))

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

for a in range(0,3):
  decode = b64.b64decode(bytes(decode.decode("utf-8"),"utf-8"))


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

exec(decode.decode("utf-8"))

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break
import os
if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None

if 1 == 1:
  None
elif "hacking" != None:
  None

for a in range(1,5):
  if a == 3:
    break
  elif a == 2:
    break

if "python" == "python":
  None


